{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timeStamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","className","map","div","key","onClick","url","whileHover","opacity","layout","img","alt","src","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42503777.chunk.js","sourcesContent":["//Importing Firebase from the package that was installed\r\nimport * as firebase from \"firebase/app\";\r\n// To store images\r\nimport \"firebase/storage\";\r\n// Firestore is a database\r\nimport \"firebase/firestore\";\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyAOngEk2Sbhl8XHQsGfmw2-Pmj9u3dHpzc\",\r\n  authDomain: \"photo-gallery-fc372.firebaseapp.com\",\r\n  databaseURL: \"https://photo-gallery-fc372.firebaseio.com\",\r\n  projectId: \"photo-gallery-fc372\",\r\n  storageBucket: \"photo-gallery-fc372.appspot.com\",\r\n  messagingSenderId: \"243824092654\",\r\n  appId: \"1:243824092654:web:260be89a73810799f85aff\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n//To Initialize storage service and firestore service\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\n// Firebase time-stamp. When need to create a firebase-time-stamp, need to invoke 'timeStamp'\r\nconst timeStamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFirestore, timeStamp };\r\n","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  /*\r\n    Comunication with the database will be inside useEffect hook, because it will re-run whenever the colection changes.\r\n    */\r\n  useEffect(() => {\r\n    /*\r\n        Uses 'projectFirestore' in order to reach in to the collection AND then LISTEN for the documents inside the \r\n        collection.\r\n        'unsub' after invocation, will return a function, which will be used to unsubscribe from the 'collection' (when we no \r\n        longer want to be listening to this collection. We will invoke 'unsub' when will UNMOUNT 'ImageGrid' component)\r\n        */\r\n    const unsub = projectFirestore\r\n      .collection(collection)\r\n      // Ordering the documents of collection\r\n      .orderBy(\"createdAt\", \"desc\")\r\n\r\n      /*\r\n        Will fire a callback func. every time the change occures inside the collection (fires initially as well). It takes in \r\n        a snapchot obj. This snapchot object represents a snapshot of the database collection at that moment.\r\n      */\r\n      .onSnapshot((snap) => {\r\n        let documents = [];\r\n        snap.forEach((doc) => {\r\n          // Push the data to the 'documents' array\r\n          documents.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        setDocs(documents);\r\n      });\r\n\r\n    //   Returns a 'clean-up' func. It will unsubscribe from the collection\r\n    return () => unsub();\r\n  }, [collection]);\r\n\r\n  return { docs };\r\n};\r\n\r\nexport default useFirestore;","import React from \"react\";\r\nimport useFirestore from \"../hooks/useFirestore\";\r\n// Will use framer-motion package for animation\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ImageGrid = (\r\n  // Destructuring from the props\r\n  { setSelectedImg }\r\n) => {\r\n  const { docs } = useFirestore(\"images\");\r\n  console.log(docs);\r\n\r\n  return (\r\n    <div className=\"img-grid\">\r\n      {docs &&\r\n        docs.map((doc) => (\r\n          //By adding 'motion.' to div will make it a 'motion element'\r\n          <motion.div\r\n            className=\"img-wrap\"\r\n            key={doc.id}\r\n            // onClick listener. Will pass url of the image that we want to show.\r\n            onClick={() => setSelectedImg(doc.url)}\r\n            // It is a 'motion' atribute\r\n            whileHover={{ opacity: 1 }}\r\n            // Whenever \"img-wrap\" class element will change position, it will animate transition.\r\n            layout\r\n          >\r\n            <motion.img\r\n              alt=\"uploaded img\"\r\n              src={doc.url}\r\n              // 'Motion' atribute to fade-in the image\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              transition={{ delay: 1 }}\r\n            />\r\n          </motion.div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGrid;\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst Modal = ({ selectedImg, setSelectedImg }) => {\r\n  // To close the Modal when clicked on 'backdrop'\r\n  const handleClick = (e) => {\r\n    // To prevent from closing the Modal when it is clicked on the image itself.\r\n    if (e.target.classList.contains(\"backdrop\")) {\r\n      setSelectedImg(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"backdrop\"\r\n      onClick={handleClick}\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n    >\r\n      <motion.img\r\n        src={selectedImg}\r\n        alt=\"enlarged pic\"\r\n        // For slide-in effect\r\n        initial={{ y: \"-100vh\" }}\r\n        // Will bring image to its original position\r\n        animate={{ y: 0 }}\r\n      />\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>Photo Gallery</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  )\n}\n\nexport default Title;","//Importing hooks\r\nimport { useState, useEffect } from \"react\";\r\n// Storage SDK\r\nimport {\r\n  projectStorage,\r\n  projectFirestore,\r\n  timeStamp,\r\n} from \"../firebase/config\";\r\n\r\n/*\r\nThis hook will handle file uploads and it will return useful values (like upload progress, image url after upload and\r\nerrors). \r\nHooks are reusable, they can be used later on in any other componentys.\r\n*/\r\n\r\nconst useStorage = (file) => {\r\n  // Upload progree\r\n  const [progress, setProgress] = useState(0);\r\n  //   Upload Errors\r\n  const [error, setError] = useState(null);\r\n  // Image url that will get back from storage after upload. It will be saved in database for later use.\r\n  const [url, setUrl] = useState(null);\r\n\r\n  /*\r\n   Takes a func. as a parameter and and second argument are dependancies.\r\n   Func. inside of useEffect will 'fire' every time when dependancie changes.\r\n  */\r\n  useEffect(\r\n    () => {\r\n      //### Logic of file upload ###\r\n\r\n      // Creating a reference to a file inside a default Firebase storage bucket. File doesn't exist yet.\r\n      const storageRef = projectStorage.ref(file.name);\r\n\r\n      //   Reference to the colection where we want to save the document to.\r\n      const collectionRef = projectFirestore.collection(\"images\");\r\n\r\n      /*\r\n       It is ASYNChronous. Will attach a listener to it, which will 'fire' func. when certain event will happen \r\n       ('state_changed' event).\r\n      */\r\n      storageRef.put(file).on(\r\n        \"state_changed\",\r\n        /*\r\n        That is the func. we want to fire. \"state_changed\" event may happen many times during the cycle of the upload, so \r\n        it will fire this func. several times while image is beying uploaded.\r\n        */\r\n        (snap) => {\r\n          let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n          setProgress(percentage);\r\n        },\r\n        // Third argument is also a function. It will handle the error of the upload.\r\n        (err) => {\r\n          setError(err);\r\n        },\r\n\r\n        /*\r\n        Fourth argument is a function which will fire when the upload is fully complete. It will be 'async' func. because \r\n        'await' will be used inside of it.\r\n        This func. will get the url of uploaded image.\r\n        */\r\n        async () => {\r\n          const url = await storageRef.getDownloadURL();\r\n          const createdAt = timeStamp();\r\n          collectionRef.add(\r\n            // Passing an object that represents the document\r\n            { url, createdAt }\r\n          );\r\n          setUrl(url);\r\n        }\r\n      );\r\n    },\r\n    //   Dependancie is a 'file'\r\n    [file]\r\n  );\r\n\r\n  return { progress, url, error };\r\n};\r\n\r\nexport default useStorage;\r\n","import React, { useEffect } from \"react\";\r\n// Custom hook\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport { motion } from \"framer-motion\";\r\n\r\n// Will use 'useStorage' hook to upload the file\r\nconst ProgressBar = (\r\n  // Destructuring passed-in props\r\n  { file, setFile }\r\n) => {\r\n  const { url, progress } = useStorage(file);\r\n\r\n  /*\r\n   We know that file is uploaded when we will get a url value.\r\n   Will use useEffect to fire a function when the value of url changes.\r\n*/\r\n  useEffect(() => {\r\n    //   If url value is valid (not null or undefined)\r\n    if (url) {\r\n      // Then the progress-bar will not show anymore.\r\n      setFile(null); //???!!! 'setFile' as second argument\r\n    }\r\n  }, [url]);\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"progress-bar\"\r\n      initial={{ width: 0 }}\r\n      // Will animate to whatever the progress value is\r\n      animate={{ width: progress + \"%\" }}\r\n    ></motion.div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { useState } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst UploadForm = () => {\r\n  // Hook. setFile - is a f. to update a state. Null is an initial value.\r\n  const [file, setFile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  //   Will need to check whether selected file is of allowed type. Therefore will have an array of allowed types.\r\n  const types = [\"image/png\", \"image/jpeg\"];\r\n\r\n  // e - event obj. that we get automatically\r\n  const changeHandler = (e) => {\r\n    // Multiple files could be selected\r\n    // Want save this file in the local peace of state. For this purpose will use useState hook\r\n    let selected = e.target.files[0];\r\n    /*\r\n      Need to ensure that the file is actually selected. If it is selected then 'selected' will evaluate to true.\r\n      Aswell it is checking the type of selected file\r\n    */\r\n    if (selected && types.includes(selected.type)) {\r\n      // File will be stored in LOCAL STATE\r\n      setFile(selected);\r\n      setError(\"\");\r\n    } else {\r\n      setFile(null);\r\n      // Error will be stored in the state\r\n      setError(\"Please select an image file (png or jpeg)\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <label>\r\n        <input type=\"file\" onChange={changeHandler} />\r\n\r\n        <span>+</span>\r\n      </label>\r\n\r\n      <div className=\"output\">\r\n        {\r\n          // If there is an error, then it will be rendered\r\n          error && <div className=\"error\">{error}</div>\r\n        }\r\n        {\r\n          // If selection is successful\r\n          file && <div>{file.name}</div>\r\n        }\r\n        {\r\n          /*\r\n           Only rendering progress when there is a file selected. Passing 'file' and func. 'setFile' as props.\r\n          */\r\n          file && <ProgressBar file={file} setFile={setFile} />\r\n        }\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","import React from \"react\";\nimport { useState } from \"react\";\nimport ImageGrid from \"./comps/ImageGrid\";\nimport Modal from \"./comps/Modal\";\nimport Title from \"./comps/Title\";\nimport UploadForm from \"./comps/UploadForm\";\n\nfunction App() {\n  // Will need to update 'selectedImg' value inside 'ImageGrid' when clicking on image.\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {\n        //Only render when 'selectedImg' has a value\n        selectedImg && (\n          <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}